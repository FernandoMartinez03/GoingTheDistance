"""
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

NOTES: WOW, you over complicated matters so much, and you just started writing gibberish code. When things are not working out, TAKE A BREAK!!
       Anyways, the idea here is to check if the current number is lower than the cheapest value found so far.
       After that, we check if the current number (price), minus the least price we have found so far, is greater than our current profit, 
       which of course is what this problem is looking for. If so, we update the profit value. It's mindblowing I spent so much in this, lol!
"""

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        minim = 0
        profit = 0

        for i in range(1, len(prices)):
            if prices[i] < prices[minim]:
                minim = i
            if prices[i] - prices[minim] > profit:
                profit = prices[i] - prices[minim]
            
        return profit
  #https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/
    
